}
#Check that values is the right length
expected_length <- nrow(schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]])
if(length(values) != expected_length){
stop(glue::glue('`values` must be length {expected_length}'))
}
if(metric=="spend"){
#Set spend and calculate weight
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] <-
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] |>
dplyr::mutate(spend = values) |>
dplyr::mutate(weight = spend / cost_per)
} else if(metric=="weight"){
#Set weight and calculate spend
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] <-
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] |>
dplyr::mutate(weight = values) |>
dplyr::mutate(spend = weight * cost_per)
} else {
stop('Unknown metric')
}
#Decay weight
decay <- schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$decay
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] <-
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] |>
dplyr::mutate(weight_decayed = stats::filter(weight, decay, "recursive"))
#Calculate uplift
alpha <- schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$alpha
beta <- schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$beta
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] <-
schedule$campaign_items[[1]][campaign,]$media_items[[1]][media,]$budget[[1]] |>
dplyr::mutate(uplift = calculate_uplift(weight_decayed, alpha, beta))
schedule
}
out <- set_media_laydown(schedule,
campaign = 1, #campaign_index,
media = 1, #media_index,
values = 50, #budget_steps,
date_index = 2) #date_index)
View(out)
View(out[[7]][[1]])
View((out[[7]][[1]])[[4]][[1]])
View(((out[[7]][[1]])[[4]][[1]])[[8]][[1]])
out <- set_media_laydown(schedule,
campaign = 1, #campaign_index,
media = 1, #media_index,
values = 50, #budget_steps,
date_index = 2) #date_index)
View(out)
View(out[[7]][[1]])
View((out[[7]][[1]])[[4]][[1]])
View(((out[[7]][[1]])[[4]][[1]])[[8]][[1]])
original_uplift <- schedule |>
unnest_schedule() |>
pull(uplift) |>
sum()
original_uplift <- schedule |>
unnest_schedule() |>
dplyr::pull(uplift) |>
sum()
original_uplift
sum_uplift_schedule <- function(schedule){
schedule |>
unnest_schedule() |>
dplyr::pull(uplift) |>
sum()
}
amended_schedule <- set_media_laydown(schedule,
campaign = 1, #campaign_index,
media = 1, #media_index,
values = 50, #budget_steps,
date_index = 2) #date_index)
new_schedule <- set_media_laydown(schedule,
campaign = 1, #campaign_index,
media = 1, #media_index,
values = 50, #budget_steps,
date_index = 2) #date_index)
devtools::load_all(".")
rm(list = c("schedule_demo", "set_media_laydown", "sum_uplift_schedule"))
devtools::load_all(".")
new_schedule <- set_media_laydown(schedule,
campaign = 1, #campaign_index,
media = 1, #media_index,
values = 50, #budget_steps,
date_index = 2) #date_index)
new_uplift <- sum_uplift_schedule(new_schedule)
new_uplift - original_uplift
items
test <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
View(test)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
test <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
devtools::load_all(".")
test <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
View(test)
budget_steps <- 50
for(i in budget_steps){
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
budget_steps <- seq(step, max_budget, step)
budget_steps
for(i in budget_steps){
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
progress::progress_bar$new(total = length(budget_steps))
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
budget_steps
step = 25
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
schedule_demo <- function() {
demo <- create_schedule("my plan", "2023-01-01", "2023-12-01") |>
add_campaign(campaign("my first campaign", "stuff")) |>
add_media(1, media("TV", "TV", alpha = 10, beta = 5, decay = 0.5)) |>
add_media(1, media("radio", "radio", alpha = 7, beta = 2, decay = 0.8)) |>
add_media(2, media("TV", "TV", alpha = 12, beta = 5, decay = 0.6)) |>
add_media(2, media("radio", "radio", alpha = 9, beta = 2, decay = 0.85))
demo
}
devtools::load_all(".")
rm(list = c("schedule_demo"))
devtools::load_all(".")
test <- schedule_demo()
test2 <- optimise_schedule(test)
devtools::load_all(".")
test2 <- optimise_schedule(test)
test2 <- optimise_schedule(test)
devtools::load_all(".")
test2 <- optimise_schedule(test)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
browser()
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
budget_steps <- 50
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
}
test2 <- optimise_schedule(test)
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
test2 <- optimise_schedule(test, 1000, 100)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, 50))
}
}
test2 <- optimise_schedule(test, 1000, 100)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
test_increment <- function(schedule, campaign, media, date_index, increment){
browser()
original_uplift <- sum_uplift_schedule(schedule)
new_schedule <- set_media_laydown(schedule,
campaign = campaign, #campaign_index,
media = media, #media_index,
values = increment, #budget_steps,
date_index = date_index) #date_index)
new_uplift <- sum_uplift_schedule(new_schedule)
new_uplift - original_uplift
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
original_uplift <- sum_uplift_schedule(schedule)
original_uplift
new_schedule <- set_media_laydown(schedule,
campaign = campaign, #campaign_index,
media = media, #media_index,
values = increment, #budget_steps,
date_index = date_index) #date_index)
new_uplift <- sum_uplift_schedule(new_schedule)
new_uplift - original_uplift
test_increment <- function(schedule, campaign, media, date_index, increment){
original_uplift <- sum_uplift_schedule(schedule)
new_schedule <- set_media_laydown(schedule,
campaign = campaign, #campaign_index,
media = media, #media_index,
values = increment, #budget_steps,
date_index = date_index) #date_index)
new_uplift <- sum_uplift_schedule(new_schedule)
new_uplift - original_uplift
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
browser()
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
budget_steps
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
View(items)
View(test)
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
schedule_demo <- function() {
demo <- create_schedule("my plan", "2023-01-01", "2023-12-01") |>
add_campaign(campaign("my first campaign", "stuff")) |>
add_media(1, media("TV", "TV", alpha = 10, beta = 5, decay = 0.5)) |>
add_media(1, media("radio", "radio", alpha = 7, beta = 2, decay = 0.8)) |>
add_campaign(campaign("my second campaign", "more stuff")) |>
add_media(2, media("TV", "TV", alpha = 12, beta = 5, decay = 0.6)) |>
add_media(2, media("radio", "radio", alpha = 9, beta = 2, decay = 0.85))
demo
}
test2 <- optimise_schedule(test, 1000, 100)
test <- schedule_demo()
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test <- schedule_demo()
test2 <- optimise_schedule(test, 1000, 100)
View(test)
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
View(((test[[7]][[1]])[[4]][[2]])[[8]][[2]])
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
browser()
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
View(items)
unnest_schedule <- function(schedule){
schedule |>
tidyr::unnest(campaign_items) |>
dplyr::mutate(campaign_index = match(campaign_id, unique(campaign_id))) |>
group_by(campaign_id) |>
tidyr::unnest(media_items) |>
dplyr::mutate(media_index = match(media_id, unique(media_id))) |>
tidyr::unnest(budget) |>
dplyr::group_by(media_id) |>
dplyr::mutate(date_index = dplyr::row_number())
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
unnest_schedule <- function(schedule){
schedule |>
tidyr::unnest(campaign_items) |>
dplyr::mutate(campaign_index = match(campaign_id, unique(campaign_id))) |>
dplyr::group_by(campaign_id) |>
tidyr::unnest(media_items) |>
dplyr::mutate(media_index = match(media_id, unique(media_id))) |>
tidyr::unnest(budget) |>
dplyr::group_by(media_id) |>
dplyr::mutate(date_index = dplyr::row_number())
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
devtools::load_all(".")
devtools::load_all(".")
which(c(2,3,3)==max(c(2,3,3)))
devtools::load_all(".")
test <- schedule_demo()
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
View(((test[[7]][[1]])[[4]][[2]])[[8]][[1]])
devtools::load_all(".")
test <- schedule_demo()
View(test)
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR')
usethis::edit_r_environ()
remotes::install_github('neilcharles/optimR')
test <- optimR::schedule_demo()
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
remotes::install_github('neilcharles/optimR')
source("~/dev/optimR/R/media_mix_navigator_scraper.R", echo=TRUE)
usethis::use_vignette()
usethis::use_vignette('Media Mix Navigator')
usethis::use_vignette('media_mix_navigator')
usethis::use_vignette('basic_optimisation')
devtools::load_all(".")
schedule <- schedule_demo()
laydown <- schedule |>
optimise_schedule(max_budget = 3000000, step = 100000)
laydown <- schedule |>
optimise_schedule(max_budget = 1000000, step = 100000)
laydown
laydown |>
unnest_schedule()
devtools::load_all(".")
selenium_docker_string()
library(optimR)
selenium_docker_string()
schedule <- schedule_demo()
laydown <- schedule |>
optimise_schedule(max_budget = 1000000, step = 100000)
laydown |>
unnest_schedule()
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR')
