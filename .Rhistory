# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
original_uplift <- sum_uplift_schedule(schedule)
original_uplift
new_schedule <- set_media_laydown(schedule,
campaign = campaign, #campaign_index,
media = media, #media_index,
values = increment, #budget_steps,
date_index = date_index) #date_index)
new_uplift <- sum_uplift_schedule(new_schedule)
new_uplift - original_uplift
test_increment <- function(schedule, campaign, media, date_index, increment){
original_uplift <- sum_uplift_schedule(schedule)
new_schedule <- set_media_laydown(schedule,
campaign = campaign, #campaign_index,
media = media, #media_index,
values = increment, #budget_steps,
date_index = date_index) #date_index)
new_uplift <- sum_uplift_schedule(new_schedule)
new_uplift - original_uplift
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
browser()
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
budget_steps
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
View(items)
View(test)
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
schedule_demo <- function() {
demo <- create_schedule("my plan", "2023-01-01", "2023-12-01") |>
add_campaign(campaign("my first campaign", "stuff")) |>
add_media(1, media("TV", "TV", alpha = 10, beta = 5, decay = 0.5)) |>
add_media(1, media("radio", "radio", alpha = 7, beta = 2, decay = 0.8)) |>
add_campaign(campaign("my second campaign", "more stuff")) |>
add_media(2, media("TV", "TV", alpha = 12, beta = 5, decay = 0.6)) |>
add_media(2, media("radio", "radio", alpha = 9, beta = 2, decay = 0.85))
demo
}
test2 <- optimise_schedule(test, 1000, 100)
test <- schedule_demo()
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test <- schedule_demo()
test2 <- optimise_schedule(test, 1000, 100)
View(test)
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
View(((test[[7]][[1]])[[4]][[2]])[[8]][[2]])
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
browser()
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
View(items)
unnest_schedule <- function(schedule){
schedule |>
tidyr::unnest(campaign_items) |>
dplyr::mutate(campaign_index = match(campaign_id, unique(campaign_id))) |>
group_by(campaign_id) |>
tidyr::unnest(media_items) |>
dplyr::mutate(media_index = match(media_id, unique(media_id))) |>
tidyr::unnest(budget) |>
dplyr::group_by(media_id) |>
dplyr::mutate(date_index = dplyr::row_number())
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
unnest_schedule <- function(schedule){
schedule |>
tidyr::unnest(campaign_items) |>
dplyr::mutate(campaign_index = match(campaign_id, unique(campaign_id))) |>
dplyr::group_by(campaign_id) |>
tidyr::unnest(media_items) |>
dplyr::mutate(media_index = match(media_id, unique(media_id))) |>
tidyr::unnest(budget) |>
dplyr::group_by(media_id) |>
dplyr::mutate(date_index = dplyr::row_number())
}
optimise_schedule <- function(schedule, max_budget = NULL, step = NULL){
# Loop through opportunities, hill climbing the most effective next step
# You cannot optimise this step by only calculating some of the rows unless media are not allowed to affect each other
# (which they are, so don't do it)
items <- schedule |>
unnest_schedule() |>
dplyr::mutate(marginal_uplift = 0)
budget_steps <- seq(step, max_budget, step)
pb <- progress::progress_bar$new(total = length(budget_steps))
for(i in budget_steps){
pb$tick()
marginal_uplifts <- items |>
dplyr::rowwise() |>
dplyr::mutate(marginal_uplift = test_increment(schedule, campaign_index, media_index, date_index, step))
}
}
test2 <- optimise_schedule(test, 1000, 100)
devtools::load_all(".")
devtools::load_all(".")
which(c(2,3,3)==max(c(2,3,3)))
devtools::load_all(".")
test <- schedule_demo()
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[2]])
View(((test[[7]][[1]])[[4]][[2]])[[8]][[1]])
devtools::load_all(".")
test <- schedule_demo()
View(test)
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR')
usethis::edit_r_environ()
remotes::install_github('neilcharles/optimR')
test <- optimR::schedule_demo()
View(test)
View(test[[6]][[1]])
View(test[[7]][[1]])
View((test[[7]][[1]])[[4]][[1]])
View(((test[[7]][[1]])[[4]][[1]])[[8]][[1]])
remotes::install_github('neilcharles/optimR')
source("~/dev/optimR/R/media_mix_navigator_scraper.R", echo=TRUE)
usethis::use_vignette()
usethis::use_vignette('Media Mix Navigator')
usethis::use_vignette('media_mix_navigator')
usethis::use_vignette('basic_optimisation')
devtools::load_all(".")
schedule <- schedule_demo()
laydown <- schedule |>
optimise_schedule(max_budget = 3000000, step = 100000)
laydown <- schedule |>
optimise_schedule(max_budget = 1000000, step = 100000)
laydown
laydown |>
unnest_schedule()
devtools::load_all(".")
selenium_docker_string()
library(optimR)
selenium_docker_string()
schedule <- schedule_demo()
laydown <- schedule |>
optimise_schedule(max_budget = 1000000, step = 100000)
laydown |>
unnest_schedule()
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR')
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE)
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE, force = TRUE)
devtools::load_all(".")
laydown <- schedule_demo() |>
optimise_schedule(max_budget = 1000000, step = 100000)
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE, force = TRUE)
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE, force = TRUE)
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE, force = TRUE)
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE, force = TRUE)
remotes::install_github('neilcharles/optimR', build_vignettes = TRUE, force = TRUE)
vignette("media_mix_navigator", package = "optimR")
devtools::load_all(".")
schedule <- schedule_demo()
View(schedule)
install.packages("mapview")
mapview(brewerie)
mapview(breweries)
library(mapview)
mapview(breweries)
shiny_maintain_schedule <- function(...) {
ui <- shiny::fluidPage(
titlePanel("Maintenance"),
mainPanel(
plotOutput("distPlot")
)
)
server <- function(input, output, session) {
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white',
xlab = 'Waiting time to next eruption (in mins)',
main = 'Histogram of waiting times')
})
}
# Run the application
shinyApp(ui = ui, server = server, launch.browser = rstudioapi::viewer)
}
shiny_maintain_schedule()
shiny_maintain_schedule <- function(...) {
ui <- shiny::fluidPage(
titlePanel("Maintenance"),
shiny::mainPanel(
shiny::p("Test")
)
)
server <- function(input, output, session) {
}
# Run the application
shinyApp(ui = ui, server = server, launch.browser = rstudioapi::viewer)
}
shiny_maintain_schedule()
shiny_maintain_schedule <- function(...) {
ui <- shiny::fluidPage(
shiny::titlePanel("Maintenance"),
shiny::mainPanel(
shiny::p("Test")
)
)
server <- function(input, output, session) {
}
# Run the application
shinyApp(ui = ui, server = server, launch.browser = rstudioapi::viewer)
}
shiny_maintain_schedule()
shiny_maintain_schedule <- function(...) {
ui <- shiny::fluidPage(
shiny::titlePanel("Maintenance"),
shiny::mainPanel(
shiny::p("Test")
)
)
server <- function(input, output, session) {
}
# Run the application
shiny::shinyApp(ui = ui, server = server, launch.browser = rstudioapi::viewer)
}
shiny_maintain_schedule()
shiny_maintain_schedule <- function(...) {
ui <- shiny::fluidPage(
shiny::titlePanel("Maintenance"),
shiny::mainPanel(
shiny::p("Test")
)
)
server <- function(input, output, session) {
}
# Run the application
shiny::shinyApp(ui = ui, server = server, launch.browser = rstudioapi::viewer)
}
shiny::runApp()
shiny::runApp("R/shiny_maintain_schedule", launch.browser = rstudioapi::viewer)
shiny::runApp("R/shiny_maintain_schedule", launch.browser = rstudioapi::viewer)
install.packages("rhandsontable")
devtools::load_all(".")
test <- schedule_demo()
maintain_schedule_interactive(test)
devtools::load_all(".")
maintain_schedule_interactive(test)
test2 <- test |> unnest_schedule()
View(test2)
View(test2[[6]][[1]])
View(test)
View(test)
devtools::load_all(".")
maintain_schedule_interactive(test)
devtools::load_all(".")
maintain_schedule_interactive(test)
View(test)
View(test[[7]][[1]])
install.packages("timevis")
View(test[[7]][[1]])
schedule_demo()
schedule_demo()$campaign_items
schedule_demo()$campaign_items[[1]]
schedule_demo()$campaign_items[[1]]$media_items[[1]]
schedule_demo()$campaign_items[[1]]$media_items[[1]] |>
tidyr::unnest(budget)
schedule_demo()$campaign_items[[1]]
tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31")
) |>
timevis::timevis()
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31")
) |>
timevis::timevis()
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31")
) |>
dplyr::mutate(content = media) |>
timevis::timevis()
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31")
) |>
dplyr::mutate(content = media) |>
timevis::timevis(editable = TRUE)
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31"),
editable = c(TRUE, TRUE)
) |>
dplyr::mutate(content = media) |>
timevis::timevis(editable = TRUE)
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31"),
editable = c(TRUE, TRUE)
) |>
dplyr::mutate(content = media) |>
timevis::timevis()
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31"),
editable = c(TRUE, TRUE)
) |>
dplyr::mutate(content = media) |>
timevis::timevis()
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31"),
editable = c(TRUE, TRUE)
) |>
dplyr::mutate(content = media) |>
timevis::timevis()
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31")
) |>
dplyr::mutate(content = media) |>
timevis::timevis() |>
timevis::setOptions(list(editable = TRUE))
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31")
) |>
dplyr::mutate(content = media) |>
timevis::timevis() |>
timevis::setOptions(list(editable = TRUE))
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31"),
) |>
dplyr::mutate(content = media,
editable = TRUE) |>
timevis::timevis() |>
timevis::setOptions(list(editable = TRUE))
tibble::tibble(
campaign = c("campaign1", "campaign1"),
media = c("TV", "Radio"),
start = c("2024-01-01", "2024-02-15"),
end = c("2024-03-31", "2024-03-31"),
) |>
dplyr::mutate(content = media,
editable = TRUE) |>
timevis::timevis() |>
timevis::setOptions(list(editable = TRUE))
devtools::load_all(".")
test <- schedule_demo()
devtools::load_all(".")
test <- schedule_demo()
warnings()
devtools::load_all(".")
usethis::edit_r_environ()
usethis::edit_r_environ()
usethis::edit_r_environ()
